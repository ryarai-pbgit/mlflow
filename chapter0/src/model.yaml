name: MYMODEL
description: このセマンティックモデルは、顧客の属性データとその取引データ、および、クレジットカードの延滞実績を管理しています。
tables:
  - name: CUSTOMER_DATA
    synonyms:
      - client_info
      - customer_details
      - customer_info
      - customer_profile
      - demographic_data
      - personal_data
      - user_data
      - user_profile
    description: 顧客の属性データを管理しています。居住地、利用デバイス、学歴、家族、性別、年収、趣味、仕事、ユーザIDを管理しています。
    base_table:
      database: TESTDB
      schema: PUBLIC
      table: CUSTOMER_DATA
    dimensions:
      - name: AGE
        description: The age range of the customer.
        expr: AGE
        data_type: VARCHAR(16777216)
        sample_values:
          - 65+
          - 35-44
          - 25-34
      - name: AREA
        description: Customer's residential prefecture in Japan.
        expr: AREA
        data_type: VARCHAR(16777216)
        sample_values:
          - 東京都
          - 徳島県
          - 福井県
      - name: DEVICE
        description: The device type that the customer primarily uses to interact with the service, categorized as either smartphone-centric, PC-centric, or multi-device usage.
        expr: DEVICE
        data_type: VARCHAR(16777216)
        sample_values:
          - スマホ中心
          - PC中心
          - マルチデバイス
      - name: EDUCATION
        description: The highest level of education completed by the customer.
        expr: EDUCATION
        data_type: VARCHAR(16777216)
        sample_values:
          - 大学院卒
          - 大卒
          - 専門学校卒
      - name: FAMILY
        description: Family status of the customer, indicating whether they are married, have children, or are single.
        expr: FAMILY
        data_type: VARCHAR(16777216)
        sample_values:
          - 既婚
          - 子供あり
          - 独身
      - name: GENDER
        description: The customer's gender, categorized as male, female, or other.
        expr: GENDER
        data_type: VARCHAR(16777216)
        sample_values:
          - 男性
          - その他
          - 女性
      - name: INCOME
        description: Annual household income range of the customer.
        expr: INCOME
        data_type: VARCHAR(16777216)
        sample_values:
          - 500-700万円
          - 300-500万円
          - 1000万円以上
      - name: INTEREST
        description: Hobbies or interests of the customer.
        expr: INTEREST
        data_type: VARCHAR(16777216)
        sample_values:
          - 読書
          - ガーデニング
          - 音楽
      - name: JOB
        description: Occupation of the customer.
        expr: JOB
        data_type: VARCHAR(16777216)
        sample_values:
          - 主婦
          - 無職
          - エンジニア
      - name: USERID
        description: Unique identifier for each customer in the system, used to track and manage individual customer interactions and data.
        expr: USERID
        data_type: VARCHAR(16777216)
        sample_values:
          - 41467f4d-fdf9-4aaf-b517-8918cff09436
          - 48e85e3c-5156-4d74-96c9-104abeafccb7
          - 09dc5552-1e6e-423a-8412-76769df15037
    unique_keys:
      - columns:
          - USERID
  - name: OVERDUE_TABLE
    synonyms:
      - borrowed_items_past_due
      - expired_loans
      - late_returns
      - overdue_items
      - past_due_items
    description: This table stores information about library items that are past their due date, including the user who borrowed the item.
    base_table:
      database: TESTDB
      schema: PUBLIC
      table: OVERDUE_TABLE
    dimensions:
      - name: USERID
        description: Unique identifier for the user who is associated with the overdue item.
        expr: USERID
        data_type: VARCHAR(16777216)
        sample_values:
          - 2f20b01d-90ef-43a6-a209-4735db8fa8e2
          - 704ee493-8deb-4ddc-9272-2e34e0914594
          - be8f622b-94e7-4de3-9cf8-1ba91380cb2a
    unique_keys:
      - columns:
          - USERID
  - name: TRANSACTION_DATA
    synonyms:
      - FINANCIAL_ACTIVITY
      - FINANCIAL_TRANSACTIONS
      - PURCHASE_HISTORY
      - SALES_RECORDS
      - TRANSACTION_DATA
      - TRANSACTION_HISTORY
      - TRANSACTION_LOG
      - USER_TRANSACTIONS
    description: This table stores records of financial transactions, including sales or purchases, with details about the user, date, category, and financial information, providing a comprehensive view of each transaction.
    base_table:
      database: TESTDB
      schema: PUBLIC
      table: TRANSACTION_DATA
    dimensions:
      - name: CATEGORY
        description: The category of the transaction, indicating the type of product or service purchased, such as food and beverages, entertainment, or travel-related expenses.
        expr: CATEGORY
        data_type: VARCHAR(16777216)
        sample_values:
          - Food & Drink
          - Entertainment
          - Travel
      - name: LOCATION
        description: The location where the transaction took place, represented by the name of the Japanese prefecture.
        expr: LOCATION
        data_type: VARCHAR(16777216)
        sample_values:
          - 大分県
          - 埼玉県
          - 新潟県
      - name: PAYMENT
        description: The method used by the customer to make a payment, such as through a mobile device, with physical cash, or using a credit card.
        expr: PAYMENT
        data_type: VARCHAR(16777216)
        sample_values:
          - Mobile Payment
          - Cash
          - Credit Card
      - name: USERID
        description: Unique identifier for the user who initiated the transaction.
        expr: USERID
        data_type: VARCHAR(16777216)
        sample_values:
          - e950d60f-044c-48c7-94df-25e64f0bcc94
          - 5bd33bf2-646b-4fcf-ab74-d831a9acfd6a
          - 41467f4d-fdf9-4aaf-b517-8918cff09436
    time_dimensions:
      - name: DATE
        description: Date of the transaction.
        expr: DATE
        data_type: DATE
        sample_values:
          - '2024-05-03'
          - '2024-06-01'
          - '2024-01-27'
    facts:
      - name: AMOUNT
        description: The amount of the transaction, representing the total value exchanged or paid in a single transaction, measured in the currency of the transaction.
        expr: AMOUNT
        data_type: NUMBER(38,13)
        sample_values:
          - '317.6000000000000'
          - '219.5200000000000'
          - '4012.7900000000000'
      - name: QUANTITY
        description: The quantity of items involved in the transaction.
        expr: QUANTITY
        data_type: NUMBER(38,0)
        sample_values:
          - '1'
      - name: UNIT
        description: The UNIT column represents the quantity or volume of a transaction, likely measured in a specific unit of measurement such as tons, pounds, or units, indicating the amount of goods or products involved in each transaction.
        expr: UNIT
        data_type: NUMBER(38,13)
        sample_values:
          - '1527.6600000000000'
          - '155.3800000000000'
          - '1229.6500000000000'
relationships:
  - left_table: TRANSACTION_DATA
    relationship_columns:
      - left_column: USERID
        right_column: USERID
    right_table: CUSTOMER_DATA
    name: 顧客と取引
  - name: 取引と延滞実績
    left_table: CUSTOMER_DATA
    relationship_columns:
      - left_column: USERID
        right_column: USERID
    right_table: OVERDUE_TABLE
verified_queries:
  - name: 延滞しているユーザーの属性（年齢、収入、職業など）とクレジットカード決済による取引カテゴリーの関係性を分析したい
    question: 延滞しているユーザーの属性（年齢、収入、職業など）とクレジットカード決済による取引カテゴリーの関係性を分析したい
    sql: |-
      SELECT
        cd.age,
        cd.income,
        cd.job,
        td.category,
        MIN(td.date) AS start_date,
        MAX(td.date) AS end_date,
        COUNT(*) AS transaction_count,
        SUM(td.amount) AS total_amount
      FROM
        overdue_table AS ot
        INNER JOIN customer_data AS cd ON ot.userid = cd.userid
        LEFT OUTER JOIN transaction_data AS td ON cd.userid = td.userid
      WHERE
        td.payment = 'Credit Card'
      GROUP BY
        cd.age,
        cd.income,
        cd.job,
        td.category
      ORDER BY
        cd.age,
        cd.income,
        cd.job,
        td.category
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761133832
  - name: 一番取引が多いユーザは誰で、どのような取引をしていますか？
    question: 一番取引が多いユーザは誰で、どのような取引をしていますか？
    sql: |-
      WITH transaction_counts AS (
        SELECT
          t.userid,
          COUNT(t.userid) AS transaction_count
        FROM
          transaction_data AS t
        WHERE
          t.date >= DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 MONTH'
          AND t.date < DATE_TRUNC('MONTH', CURRENT_DATE)
        GROUP BY
          t.userid
        ORDER BY
          transaction_count DESC
        LIMIT
          1
      ), user_transactions AS (
        SELECT
          t.userid,
          t.category,
          t.location,
          t.payment,
          t.date,
          t.amount,
          t.quantity,
          t.unit
        FROM
          transaction_data AS t
          JOIN transaction_counts AS tc ON t.userid = tc.userid
      )
      SELECT
        ut.userid,
        ut.category,
        ut.location,
        ut.payment,
        ut.date,
        ut.amount,
        ut.quantity,
        ut.unit
      FROM
        user_transactions AS ut
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761133836
  - name: |2-

              以下のRAGコンテキストを参考に、質問に答えてください。
              
              RAGコンテキスト:
              旅行の平均支出が少ない人は、年収に関係なく手持ちに余裕がなく、クレジットカード延滞が多くなる傾向がある。


              
              質問: クレジットカードの延滞がある人とない人の特徴を分析したい
              
              上記のRAGコンテキストを基に、詳細で有用な回答を提供してください。
              
    question: |2-

              以下のRAGコンテキストを参考に、質問に答えてください。
              
              RAGコンテキスト:
              旅行の平均支出が少ない人は、年収に関係なく手持ちに余裕がなく、クレジットカード延滞が多くなる傾向がある。


              
              質問: クレジットカードの延滞がある人とない人の特徴を分析したい
              
              上記のRAGコンテキストを基に、詳細で有用な回答を提供してください。
              
    sql: |-
      WITH customer_overdue_status AS (
        SELECT
          cd.userid,
          cd.age,
          cd.area,
          cd.device,
          cd.education,
          cd.family,
          cd.gender,
          cd.income,
          cd.interest,
          cd.job,
          CASE
            WHEN NOT ot.userid IS NULL THEN 'Has Overdue'
            ELSE 'No Overdue'
          END AS overdue_status
        FROM
          customer_data AS cd
          LEFT OUTER JOIN overdue_table AS ot ON cd.userid = ot.userid
      ),
      travel_spending AS (
        SELECT
          td.userid,
          AVG(td.amount) AS avg_travel_amount,
          SUM(td.amount) AS total_travel_amount,
          COUNT(*) AS travel_transaction_count
        FROM
          transaction_data AS td
        WHERE
          td.category = 'Travel'
        GROUP BY
          td.userid
      ),
      customer_analysis AS (
        SELECT
          cos.overdue_status,
          cos.age,
          cos.area,
          cos.device,
          cos.education,
          cos.family,
          cos.gender,
          cos.income,
          cos.interest,
          cos.job,
          COALESCE(ts.avg_travel_amount, 0) AS avg_travel_amount,
          COALESCE(ts.total_travel_amount, 0) AS total_travel_amount,
          COALESCE(ts.travel_transaction_count, 0) AS travel_transaction_count
        FROM
          customer_overdue_status AS cos
          LEFT OUTER JOIN travel_spending AS ts ON cos.userid = ts.userid
      )
      SELECT
        overdue_status,
        COUNT(*) AS customer_count,
        AVG(avg_travel_amount) AS avg_travel_spending_per_customer,
        AVG(total_travel_amount) AS avg_total_travel_spending,
        AVG(travel_transaction_count) AS avg_travel_transactions,
        COUNT(
          CASE
            WHEN income = '300-500万円' THEN 1
          END
        ) AS income_300_500,
        COUNT(
          CASE
            WHEN income = '500-700万円' THEN 1
          END
        ) AS income_500_700,
        COUNT(
          CASE
            WHEN income = '1000万円以上' THEN 1
          END
        ) AS income_1000_plus,
        COUNT(
          CASE
            WHEN age = '25-34' THEN 1
          END
        ) AS age_25_34,
        COUNT(
          CASE
            WHEN age = '35-44' THEN 1
          END
        ) AS age_35_44,
        COUNT(
          CASE
            WHEN age = '65+' THEN 1
          END
        ) AS age_65_plus,
        COUNT(
          CASE
            WHEN gender = '男性' THEN 1
          END
        ) AS male_count,
        COUNT(
          CASE
            WHEN gender = '女性' THEN 1
          END
        ) AS female_count
      FROM
        customer_analysis
      GROUP BY
        overdue_status
      ORDER BY
        overdue_status
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761133839
  - name: マルチデバイスユーザーの延滞率は他と比べて低いですか？
    question: マルチデバイスユーザーの延滞率は他と比べて低いですか？
    sql: |-
      WITH device_overdue_analysis AS (
        SELECT
          cd.device,
          COUNT(*) AS total_users,
          COUNT(ot.userid) AS overdue_users
        FROM
          customer_data AS cd
          LEFT OUTER JOIN overdue_table AS ot ON cd.userid = ot.userid
        GROUP BY
          cd.device
      )
      SELECT
        device,
        total_users,
        overdue_users,
        CASE
          WHEN total_users > 0 THEN CAST(overdue_users AS FLOAT) / NULLIF(total_users, 0)
          ELSE 0
        END AS overdue_rate
      FROM
        device_overdue_analysis
      ORDER BY
        overdue_rate ASC
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761138257
  - name: 売上が少ない地域の特徴は？
    question: 売上が少ない地域の特徴は？
    sql: |-
      WITH regional_sales AS (
        SELECT
          td.location,
          SUM(td.amount) AS total_sales,
          COUNT(*) AS transaction_count
        FROM
          transaction_data AS td
        GROUP BY
          td.location
      ),
      low_sales_regions AS (
        SELECT
          location
        FROM
          regional_sales
        ORDER BY
          total_sales ASC
        LIMIT
          5
      ), regional_characteristics AS (
        SELECT
          td.location,
          td.category,
          td.payment,
          cd.age,
          cd.income,
          cd.job,
          cd.device,
          cd.education,
          cd.gender,
          MIN(td.date) AS start_date,
          MAX(td.date) AS end_date,
          COUNT(*) AS transaction_count,
          SUM(td.amount) AS total_amount,
          AVG(td.amount) AS avg_amount
        FROM
          transaction_data AS td
          LEFT OUTER JOIN customer_data AS cd ON td.userid = cd.userid
        WHERE
          td.location IN (
            SELECT
              location
            FROM
              low_sales_regions
          )
        GROUP BY
          td.location,
          td.category,
          td.payment,
          cd.age,
          cd.income,
          cd.job,
          cd.device,
          cd.education,
          cd.gender
      )
      SELECT
        location,
        category,
        payment,
        age,
        income,
        job,
        device,
        education,
        gender,
        start_date,
        end_date,
        transaction_count,
        total_amount,
        avg_amount
      FROM
        regional_characteristics
      ORDER BY
        location,
        total_amount DESC NULLS LAST
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761138582
  - name: 学歴別の平均取引額を教えてください
    question: 学歴別の平均取引額を教えてください
    sql: |-
      SELECT
        cd.education,
        MIN(td.date) AS start_date,
        MAX(td.date) AS end_date,
        AVG(td.amount) AS avg_transaction_amount
      FROM
        transaction_data AS td
        LEFT OUTER JOIN customer_data AS cd ON td.userid = cd.userid
      WHERE
        NOT cd.education IS NULL
      GROUP BY
        cd.education
      ORDER BY
        avg_transaction_amount DESC NULLS LAST
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761138642
  - name: Food & Drink購入者が次に買うカテゴリは？
    question: Food & Drink購入者が次に買うカテゴリは？
    sql: |-
      WITH food_drink_users AS (
        SELECT
          DISTINCT td.userid
        FROM
          transaction_data AS td
        WHERE
          td.category = 'Food & Drink'
      ),
      food_drink_transactions AS (
        SELECT
          td.userid,
          td.date,
          td.category
        FROM
          transaction_data AS td
        WHERE
          td.userid IN (
            SELECT
              userid
            FROM
              food_drink_users
          )
          AND td.category = 'Food & Drink'
      ),
      subsequent_transactions AS (
        SELECT
          fdt.userid,
          fdt.date AS food_drink_date,
          td.date AS subsequent_date,
          td.category AS subsequent_category
        FROM
          food_drink_transactions AS fdt
          JOIN transaction_data AS td ON fdt.userid = td.userid
        WHERE
          td.date > fdt.date
          AND td.category <> 'Food & Drink'
      ),
      next_category_analysis AS (
        SELECT
          subsequent_category,
          COUNT(*) AS purchase_count,
          COUNT(DISTINCT userid) AS unique_users
        FROM
          subsequent_transactions
        GROUP BY
          subsequent_category
      )
      SELECT
        subsequent_category,
        purchase_count,
        unique_users,
        CAST(purchase_count AS FLOAT) / NULLIF(
          NULLIF(
            (
              SELECT
                SUM(purchase_count)
              FROM
                next_category_analysis
            ),
            0
          ),
          0
        ) AS category_ratio
      FROM
        next_category_analysis
      ORDER BY
        purchase_count DESC NULLS LAST
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761138760
  - name: 世帯年収と個人年収の違いを考慮した分析は？
    question: 世帯年収と個人年収の違いを考慮した分析は？
    sql: |-
      WITH local_consumption AS (
        SELECT
          td.userid,
          SUM(td.amount) AS local_spending_amount,
          COUNT(*) AS local_transaction_count
        FROM
          transaction_data AS td
          LEFT OUTER JOIN customer_data AS cd ON td.userid = cd.userid
        WHERE
          td.location = cd.area
        GROUP BY
          td.userid
      ),
      high_local_spenders AS (
        SELECT
          userid
        FROM
          local_consumption
        ORDER BY
          local_spending_amount DESC
        LIMIT
          100
      ), customer_analysis AS (
        SELECT
          cd.income,
          cd.age,
          cd.job,
          cd.device,
          cd.education,
          cd.gender,
          cd.family,
          cd.interest,
          MIN(td.date) AS start_date,
          MAX(td.date) AS end_date,
          COUNT(DISTINCT cd.userid) AS customer_count,
          AVG(lc.local_spending_amount) AS avg_local_spending,
          SUM(lc.local_spending_amount) AS total_local_spending,
          AVG(lc.local_transaction_count) AS avg_local_transactions
        FROM
          customer_data AS cd
          INNER JOIN high_local_spenders AS hls ON cd.userid = hls.userid
          LEFT OUTER JOIN local_consumption AS lc ON cd.userid = lc.userid
          LEFT OUTER JOIN transaction_data AS td ON cd.userid = td.userid
        WHERE
          NOT cd.income IS NULL
        GROUP BY
          cd.income,
          cd.age,
          cd.job,
          cd.device,
          cd.education,
          cd.gender,
          cd.family,
          cd.interest
      )
      SELECT
        income,
        age,
        job,
        device,
        education,
        gender,
        family,
        interest,
        start_date,
        end_date,
        customer_count,
        avg_local_spending,
        total_local_spending,
        avg_local_transactions
      FROM
        customer_analysis
      ORDER BY
        income,
        avg_local_spending DESC NULLS LAST
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761138975
  - name: Food & Drinkカテゴリの売上推移の分析結果は
    question: Food & Drinkカテゴリの売上推移の分析結果は
    sql: |-
      WITH monthly_sales AS (
        SELECT
          DATE_TRUNC('MONTH', td.date) AS month,
          SUM(td.amount) AS monthly_sales,
          COUNT(*) AS transaction_count,
          AVG(td.amount) AS avg_transaction_amount
        FROM
          transaction_data AS td
        WHERE
          td.category = 'Food & Drink'
        GROUP BY
          DATE_TRUNC('MONTH', td.date)
      ),
      mom_analysis AS (
        SELECT
          curr.month AS curr_month,
          prev.month AS prev_month,
          curr.monthly_sales AS curr_monthly_sales,
          prev.monthly_sales AS prev_monthly_sales,
          curr.transaction_count AS curr_transaction_count,
          prev.transaction_count AS prev_transaction_count,
          curr.avg_transaction_amount AS curr_avg_transaction_amount,
          prev.avg_transaction_amount AS prev_avg_transaction_amount,
          curr.monthly_sales - prev.monthly_sales AS mom_sales_chg,
          CASE
            WHEN prev.monthly_sales <> 0 THEN (curr.monthly_sales - prev.monthly_sales) / NULLIF(prev.monthly_sales, 0)
          END AS mom_sales_pct_chg
        FROM
          monthly_sales AS curr
          LEFT JOIN monthly_sales AS prev ON curr.month = prev.month + INTERVAL '1 MONTH'
      )
      SELECT
        curr_month,
        prev_month,
        curr_monthly_sales,
        prev_monthly_sales,
        curr_transaction_count,
        prev_transaction_count,
        curr_avg_transaction_amount,
        prev_avg_transaction_amount,
        mom_sales_chg,
        mom_sales_pct_chg,
        (
          SELECT
            MIN(date)
          FROM
            transaction_data
          WHERE
            category = 'Food & Drink'
        ) AS start_date,
        (
          SELECT
            MAX(date)
          FROM
            transaction_data
          WHERE
            category = 'Food & Drink'
        ) AS end_date
      FROM
        mom_analysis
      ORDER BY
        curr_month DESC NULLS LAST
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761139306
  - name: 延滞ユーザーの年齢分布を把握したい
    question: 延滞ユーザーの年齢分布を把握したい
    sql: |-
      SELECT
        cd.age,
        COUNT(*) AS overdue_user_count
      FROM
        overdue_table AS ot
        INNER JOIN customer_data AS cd ON ot.userid = cd.userid
      WHERE
        NOT cd.age IS NULL
      GROUP BY
        cd.age
      ORDER BY
        overdue_user_count DESC NULLS LAST
    use_as_onboarding_question: false
    verified_by: 
    verified_at: 1761139402